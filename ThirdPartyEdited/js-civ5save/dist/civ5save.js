(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["Civ5Save"] = factory();
	else
		root["Civ5Save"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/Civ5Save.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/Civ5Save.js":
/*!*************************!*\
  !*** ./src/Civ5Save.js ***!
  \*************************/
/*! exports provided: default, InvalidSignatureError, ParseError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"InvalidSignatureError\", function() { return InvalidSignatureError; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ParseError\", function() { return ParseError; });\n/* harmony import */ var _Civ5SaveDataView__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Civ5SaveDataView */ \"./src/Civ5SaveDataView.js\");\n/* harmony import */ var _Civ5SavePropertyDefinitions_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Civ5SavePropertyDefinitions.js */ \"./src/Civ5SavePropertyDefinitions.js\");\n/* harmony import */ var _Civ5SavePropertyFactory__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Civ5SavePropertyFactory */ \"./src/Civ5SavePropertyFactory.js\");\n/* harmony import */ var _ExtendableError__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ExtendableError */ \"./src/ExtendableError.js\");\n\n\n\n\n\n/**\n * A Civilization V save file object.\n */\nclass Civ5Save {\n  /**\n   * Create a Civ5Save object.\n   *\n   * As an alternative, a static factory method is available for more convenient instantiation from a file:\n   * [fromFile](#static-method-fromFile)\n   * @param {DataView} saveData - The save file contents.\n   * @throws {InvalidSignatureError} Invalid file signature.\n   * @throws {ParseError} Error while parsing the save file.\n   */\n  constructor(saveData) {\n    /**\n     * @private\n     */\n    // TODO: Convert fields and methods starting with underscores to private once it makes it into the spec\n    // (https://github.com/tc39/proposals)\n    this._saveData = new _Civ5SaveDataView__WEBPACK_IMPORTED_MODULE_0__[\"default\"](saveData.buffer);\n    /**\n     * @private\n     */\n    this._verifyFileSignature();\n    /**\n     * @private\n     */\n    this._properties = this._getProperties();\n  }\n\n  /**\n   * Create a Civ5Save object from a file.\n   *\n   * Reading data from a file needs to be done asynchronously; since the\n   * [constructor](#instance-constructor-constructor) cannot be async, this static factory is provided as an alternative\n   * way to instantiate a Civ5Save object from a file (https://stackoverflow.com/a/24686979/399105).\n   * @param {File} saveFile - A Civilization V save file.\n   * @return {Civ5Save} A Civ5Save object.\n   * @throws {InvalidSignatureError} Invalid file signature.\n   * @throws {ParseError} Error while parsing the save file.\n   * @example\n   * try {\n   *   let save = await Civ5Save.fromFile(saveFile);\n   *   ...\n   */\n  static async fromFile(saveFile) {\n    let saveData = await Civ5Save._loadData(saveFile);\n    return new Civ5Save(saveData);\n  }\n\n  /**\n   * @private\n   */\n  static _loadData(saveFile) {\n    return new Promise(function (resolve, reject) {\n      let reader = new FileReader();\n\n      reader.onload = function () {\n        // Use a DataView for the savegame data since the ArrayBuffer returned by reader.result can't be used to\n        // manipulate the data. A typed array such as Int8Array wouldn't be ideal either since the data contains types\n        // of variable lengths\n        resolve(new DataView(reader.result));\n      };\n      reader.onerror = function () {\n        reject(reader.error);\n      };\n\n      reader.readAsArrayBuffer(saveFile);\n    });\n  }\n\n  /**\n   * Write Civ5Save object to a blob.\n   * @return {Blob} The save file with any changes.\n   * @example\n   * let downloadURL = window.URL.createObjectURL(save.toBlob());\n   */\n  toBlob() {\n    return new Blob([this._saveData], {\n      type: 'application/octet-stream'\n    });\n  }\n\n  /**\n   * @private\n   */\n  _verifyFileSignature() {\n    if (this._saveData.getString(0, 4) !== 'CIV5') {\n      throw new InvalidSignatureError('File signature does not match. Is this a Civ 5 savegame?');\n    }\n  }\n\n  /**\n   * @private\n   */\n  _getProperties() {\n    let previousPropertyName = null;\n    let previousPropertySection = 0;\n    let properties = new Map();\n    let saveGameVersion = null;\n    let sectionOffsets = null;\n\n    for (let propertyName in _Civ5SavePropertyDefinitions_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n      // Check for currentTurn since gameBuild may not be available as a property\n      if (propertyName === 'currentTurn') {\n        this._setGameBuild(properties.gameBuild);\n        sectionOffsets = this._getSectionOffsets(this.gameBuild);\n      }\n      if (previousPropertyName === 'saveGameVersion') {\n        saveGameVersion = properties.saveGameVersion.getValue(this._saveData);\n      }\n\n      // Make propertyDefinition a copy; otherwise it will modify the property for every instance of the Civ5Save class\n      let propertyDefinition = Object.assign({}, _Civ5SavePropertyDefinitions_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"][propertyName]);\n\n      let propertySection = this._getPropertySection(propertyDefinition, saveGameVersion, this.gameBuild);\n      // If propertySection is null, it means the property isn't available for the particular game build\n      if (this._isNullOrUndefined(propertySection)) {\n        continue;\n      }\n\n      let propertyLength = propertyDefinition.length;\n      if (propertyDefinition.hasOwnProperty('getLength')) {\n        propertyLength = propertyDefinition.getLength(\n          properties.enabledDLC.getArray(),\n          properties.enabledMods.getArray());\n      }\n\n      let propertyByteOffset = 0;\n      if (propertySection === previousPropertySection) {\n        let previousProperty = properties[previousPropertyName];\n        propertyByteOffset = previousProperty.byteOffset + previousProperty.length;\n\n      } else if (previousPropertyName !== null) {\n        propertyByteOffset = sectionOffsets[propertySection - 1].start + propertyDefinition.byteOffsetInSection;\n      }\n\n      try {\n        properties[propertyName] = _Civ5SavePropertyFactory__WEBPACK_IMPORTED_MODULE_2__[\"default\"].fromType(\n          propertyDefinition.type,\n          propertyByteOffset,\n          propertyLength,\n          this._saveData);\n      } catch (e) {\n        throw new ParseError(`Failure parsing save at property ${propertyName}`);\n      }\n\n      previousPropertyName = propertyName;\n      previousPropertySection = propertySection;\n    }\n\n    return properties;\n  }\n\n  /**\n   * @private\n   */\n  _getSectionOffsets(gameBuild) {\n    const SECTION_DELIMITER = [0x40, 0, 0, 0];\n\n    const LAST_PROPERTY_DEFINITION = _Civ5SavePropertyDefinitions_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"][Object.keys(_Civ5SavePropertyDefinitions_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])[Object.keys(\n      _Civ5SavePropertyDefinitions_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]).length - 1]];\n    const LAST_SECTION = LAST_PROPERTY_DEFINITION.sectionByBuild[Object.keys(\n      LAST_PROPERTY_DEFINITION.sectionByBuild)[Object.keys(\n      LAST_PROPERTY_DEFINITION.sectionByBuild).length - 1]];\n\n    let saveDataBytes = new Int8Array(this._saveData.buffer);\n    let sectionOffsets = [];\n    let section = {\n      start: 0,\n    };\n    sectionOffsets.push(section);\n\n    for (let byteOffset = 0; byteOffset < saveDataBytes.length; byteOffset++) {\n      if (this._areArraysEqual(saveDataBytes.slice(byteOffset, byteOffset + 4), SECTION_DELIMITER)) {\n        // Player colour section before build 310700 contains hex values, which can include the section delimiter\n        if (Number(gameBuild) < 310700) {\n          let playerColourSection = 23;\n          if (Number(gameBuild) >= 262623) {\n            playerColourSection = 24;\n          }\n          if (sectionOffsets.length === playerColourSection) {\n            if (byteOffset - sectionOffsets[sectionOffsets.length - 1].start < 270) {\n              continue;\n            }\n          }\n        }\n\n        let section = {\n          start: byteOffset,\n        };\n        sectionOffsets.push(section);\n        sectionOffsets[sectionOffsets.length - 2].end = byteOffset - 1;\n\n        if (sectionOffsets.length === LAST_SECTION) {\n          break;\n        }\n      }\n    }\n\n    return sectionOffsets;\n  }\n\n  /**\n   * @private\n   * @see https://stackoverflow.com/a/22395463/399105\n   */\n  _areArraysEqual(array1, array2) {\n    return (array1.length === array2.length) && array1.every(function(element, index) {\n      return element === array2[index];\n    });\n  }\n\n  /**\n   * @private\n   */\n  _getPropertySection(propertyDefinition, saveGameVersion, gameBuild) {\n    if (propertyDefinition.hasOwnProperty('getSection')) {\n      return propertyDefinition.getSection(saveGameVersion);\n    }\n\n    let propertySection = null;\n\n    for (let build in propertyDefinition.sectionByBuild) {\n      if (Number.parseInt(gameBuild) >= Number.parseInt(build)) {\n        propertySection = propertyDefinition.sectionByBuild[build];\n      }\n    }\n\n    return propertySection;\n  }\n\n  /**\n   * @private\n   */\n  _isNullOrUndefined(variable) {\n    return typeof variable === 'undefined' || variable === null;\n  }\n\n  /**\n   * Game build number.\n   *\n   * Note that for games created or saved before build 230620, this will return the game build that was used to create\n   * the save file. Starting with build 230620, this will return the game build that was last used to save the save\n   * file.\n   * @type {string}\n   * @throws {ParseError} Error while parsing the save file.\n   */\n  get gameBuild() {\n    try {\n      return this._gameBuild;\n    } catch (e) {\n      throw new ParseError('Failure parsing save at property gameBuild');\n    }\n  }\n\n  /**\n   * @private\n   */\n  // Game build was only added to the beginning of the savegame in game version 1.0.2. This should be able to get the\n  // game build for all savegame versions\n  _getGameBuild() {\n    const GAME_BUILD_MARKER = 'FINAL_RELEASE';\n    const GAME_BUILD_MARKER_ARRAY = (function() {\n      let gameBuildMarkerArray = [];\n      for (let i = 0; i < GAME_BUILD_MARKER.length; i++) {\n        gameBuildMarkerArray.push(GAME_BUILD_MARKER.charCodeAt(i));\n      }\n      return gameBuildMarkerArray;\n    }());\n\n    let gameBuildMarkerByteOffset = 0;\n    let saveDataBytes = new Int8Array(this._saveData.buffer);\n    for (let byteOffset = 0; byteOffset <= saveDataBytes.length; byteOffset++) {\n      if (this._areArraysEqual(\n        saveDataBytes.slice(byteOffset, byteOffset + GAME_BUILD_MARKER_ARRAY.length),\n        GAME_BUILD_MARKER_ARRAY)) {\n        gameBuildMarkerByteOffset = byteOffset;\n        break;\n      }\n    }\n\n    let gameBuild = '';\n    let byteOffset = gameBuildMarkerByteOffset - 2;\n    while (saveDataBytes.slice(byteOffset, byteOffset + 1)[0] !== 0) {\n      gameBuild = String.fromCharCode(saveDataBytes.slice(byteOffset, byteOffset + 1)) + gameBuild;\n      byteOffset--;\n    }\n\n    return gameBuild;\n  }\n\n  /**\n   * @private\n   */\n  _setGameBuild(gameBuildProperty) {\n    if (typeof gameBuildProperty !== 'undefined') {\n      /**\n       * @private\n       */\n      this._gameBuild = gameBuildProperty.getValue(this._saveData);\n\n      // Ugly hack to work around https://github.com/bmaupin/civ5save-editor/issues/15. C'mon Aspyr! :P\n      if (this._gameBuild === '180925') {\n        this._gameBuild = '403694';\n      }\n    } else {\n      this._gameBuild = this._getGameBuild();\n    }\n  }\n\n  /**\n   * Game version.\n   *\n   * Note that this will be `undefined` if [gameBuild](#instance-get-gameBuild) is less than 230620. `undefined` is used\n   * instead of `null` because older save files do not have a spot for this information (`null` might incorrectly imply\n   * the spot is there but empty).\n   * @type {string|undefined}\n   * @throws {ParseError} Error while parsing the save file.\n   */\n  get gameVersion() {\n    return this._getPropertyIfDefined('gameVersion');\n  }\n\n  /**\n   * Current turn.\n   * @type {number}\n   * @throws {ParseError} Error while parsing the save file.\n   */\n  get currentTurn() {\n    return this._getPropertyIfDefined('currentTurn');\n  }\n\n  /**\n   * Game mode: one of `Civ5Save.GAME_MODES.SINGLE`, `Civ5Save.GAME_MODES.MULTI`, or `Civ5Save.GAME_MODES.HOTSEAT`.\n   *\n   * Note that this will be `undefined` if [gameBuild](#instance-get-gameBuild) is less than 230620 because the meaning\n   * of its value is unknown. `undefined` is used instead of `null` because `null` might incorrectly imply the value is\n   * empty.\n   * @type {string|undefined}\n   * @throws {ParseError} Error while parsing the save file.\n   */\n  get gameMode() {\n    if (Number(this.gameBuild) >= 230620) {\n      try {\n        return _Civ5SavePropertyDefinitions_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].gameMode.values[this._properties.gameMode.getValue(this._saveData)];\n      } catch (e) {\n        throw new ParseError('Failure parsing save at property gameMode');\n      }\n    }\n  }\n\n  /**\n   * Game difficulty.\n   * @type {string}\n   * @throws {ParseError} Error while parsing the save file.\n   */\n  get difficulty() {\n    return this._getBeautifiedPropertyIfDefined('difficulty');\n  }\n\n  /**\n   * Starting era.\n   * @type {string}\n   * @throws {ParseError} Error while parsing the save file.\n   */\n  get startingEra() {\n    return this._getBeautifiedPropertyIfDefined('startingEra');\n  }\n\n  /**\n   * Current era.\n   * @type {string}\n   * @throws {ParseError} Error while parsing the save file.\n   */\n  get currentEra() {\n    return this._getBeautifiedPropertyIfDefined('currentEra');\n  }\n\n  /**\n   * Game pace.\n   * @type {string}\n   * @throws {ParseError} Error while parsing the save file.\n   */\n  get gamePace() {\n    return this._getBeautifiedPropertyIfDefined('gamePace');\n  }\n\n  /**\n   * Map size.\n   * @type {string}\n   * @throws {ParseError} Error while parsing the save file.\n   */\n  get mapSize() {\n    return this._getBeautifiedPropertyIfDefined('mapSize');\n  }\n\n  /**\n   * Map file.\n   * @type {string}\n   * @throws {ParseError} Error while parsing the save file.\n   */\n  get mapFile() {\n    let mapFileValue = this._getPropertyIfDefined('mapFile');\n    if (!this._isNullOrUndefined(mapFileValue)) {\n      return this._beautifyMapFileValue(mapFileValue);\n    }\n  }\n\n  /**\n   * List of enabled DLC.\n   * @type {Array}\n   * @throws {ParseError} Error while parsing the save file.\n   */\n  get enabledDLC() {\n    if (this._properties.hasOwnProperty('enabledDLC')) {\n      try {\n        return this._properties.enabledDLC.getArray();\n      } catch (e) {\n        throw new ParseError('Failure parsing save at property enabledDLC');\n      }\n    }\n  }\n\n  /**\n   * List of enabled mods.\n   * @type {Array}\n   * @throws {ParseError} Error while parsing the save file.\n   */\n  get enabledMods() {\n    if (this._properties.hasOwnProperty('enabledMods')) {\n      try {\n        return this._properties.enabledMods.getArray();\n      } catch (e) {\n        throw new ParseError('Failure parsing save at property enabledMods');\n      }\n    }\n  }\n\n  /**\n   * List of players as objects with their civilization and status as properties.\n   *\n   * Civilization will be `undefined` if [gameBuild](#instance-get-gameBuild) is less than 310700.\n   *\n   * Status is one of `Civ5Save.PLAYER_STATUSES.AI`, `Civ5Save.PLAYER_STATUSES.DEAD`, `Civ5Save.PLAYER_STATUSES.HUMAN`,\n   *     `Civ5Save.PLAYER_STATUSES.NONE`.\n   * @type {Array.<{civilization: string|undefined, status: number}>}\n   * @throws {ParseError} Error while parsing the save file.\n   */\n  get players() {\n    if (this._isNullOrUndefined(this._players)) {\n      /**\n       * @private\n       */\n      this._players = new Array();\n      let playerStatuses = this._properties.playerStatuses.getArray();\n      for (let i = 0; i < playerStatuses.length; i++) {\n        let player = new Object();\n        player.status = _Civ5SavePropertyDefinitions_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].playerStatuses.values[playerStatuses[i]];\n\n        if (player.status === Civ5Save.PLAYER_STATUSES.NONE) {\n          break;\n        }\n\n        if (this._properties.hasOwnProperty('playerCivilizations')) {\n          if (this._properties.playerCivilizations.getArray()[i] === '') {\n            break;\n          }\n          player.civilization = this._beautifyPropertyValue(this._properties.playerCivilizations.getArray()[i]);\n\n        } else if (i === 0 && this._properties.hasOwnProperty('player1Civilization')) {\n          try {\n            player.civilization = this._beautifyPropertyValue(\n              this._properties.player1Civilization.getValue(this._saveData));\n          } catch (e) {\n            throw new ParseError('Failure parsing save at property players');\n          }\n        }\n\n        this._players.push(player);\n      }\n    }\n\n    return this._players;\n  }\n\n  /**\n   * Max turns.\n   * @type {number}\n   * @throws {ParseError} Error while parsing the save file.\n   */\n  get maxTurns() {\n    return this._getPropertyIfDefined('maxTurns');\n  }\n\n  /**\n   * Max turns.\n   * @type {number}\n   */\n  set maxTurns(newValue) {\n    this._properties.maxTurns.setValue(this._saveData, newValue);\n  }\n\n  /**\n   * Turn timer length for multiplayer games. If pitboss is enabled, this value represents turn timer in hours.\n   *     Otherwise, it is in minutes.\n   * @type {number}\n   * @throws {ParseError} Error while parsing the save file.\n   */\n  get turnTimerLength() {\n    return this._getPropertyIfDefined('turnTimerLength');\n  }\n\n  /**\n   * Turn timer length for multiplayer games. If pitboss is enabled, this value represents turn timer in hours.\n   *     Otherwise, it is in minutes.\n   * @type {number}\n   */\n  set turnTimerLength(newValue) {\n    this._properties.turnTimerLength.setValue(this._saveData, newValue);\n  }\n\n  /**\n   * Private setting for multiplayer games.\n   *\n   * Note that this will be `undefined` if [gameBuild](#instance-get-gameBuild) is less than 310700 because it isn't\n   * implemented. `undefined` is used instead of `null` because `null` might incorrectly imply the value is empty.\n   * @type {boolean}\n   * @throws {ParseError} Error while parsing the save file.\n   */\n  get privateGame() {\n    return this._getPropertyIfDefined('privateGame');\n  }\n\n  /**\n   * Private setting for multiplayer games.\n   * @type {boolean}\n   */\n  set privateGame(newValue) {\n    this._properties.privateGame.setValue(this._saveData, newValue);\n  }\n\n  /**\n   * Time victory.\n   * @type {boolean}\n   * @throws {ParseError} Error while parsing the save file.\n   */\n  get timeVictory() {\n    return this._getPropertyIfDefined('timeVictory');\n  }\n\n  /**\n   * Time victory.\n   * @type {boolean}\n   */\n  set timeVictory(newValue) {\n    this._properties.timeVictory.setValue(this._saveData, newValue);\n  }\n\n  /**\n   * Science victory.\n   * @type {boolean}\n   * @throws {ParseError} Error while parsing the save file.\n   */\n  get scienceVictory() {\n    return this._getPropertyIfDefined('scienceVictory');\n  }\n\n  /**\n   * Science victory.\n   * @type {boolean}\n   */\n  set scienceVictory(newValue) {\n    this._properties.scienceVictory.setValue(this._saveData, newValue);\n  }\n\n  /**\n   * Domination victory.\n   * @type {boolean}\n   * @throws {ParseError} Error while parsing the save file.\n   */\n  get dominationVictory() {\n    return this._getPropertyIfDefined('dominationVictory');\n  }\n\n  /**\n   * Domination victory.\n   * @type {boolean}\n   */\n  set dominationVictory(newValue) {\n    this._properties.dominationVictory.setValue(this._saveData, newValue);\n  }\n\n  /**\n   * Cultural victory.\n   * @type {boolean}\n   * @throws {ParseError} Error while parsing the save file.\n   */\n  get culturalVictory() {\n    return this._getPropertyIfDefined('culturalVictory');\n  }\n\n  /**\n   * Cultural victory.\n   * @type {boolean}\n   */\n  set culturalVictory(newValue) {\n    this._properties.culturalVictory.setValue(this._saveData, newValue);\n  }\n\n  /**\n   * Diplomatic victory.\n   * @type {boolean}\n   * @throws {ParseError} Error while parsing the save file.\n   */\n  get diplomaticVictory() {\n    return this._getPropertyIfDefined('diplomaticVictory');\n  }\n\n  /**\n   * Diplomatic victory.\n   * @type {boolean}\n   */\n  set diplomaticVictory(newValue) {\n    this._properties.diplomaticVictory.setValue(this._saveData, newValue);\n  }\n\n  /**\n   * Always peace.\n   * @type {boolean}\n   * @throws {ParseError} Error while parsing the save file.\n   */\n  get alwaysPeace() {\n    return this._getGameOption('GAMEOPTION_ALWAYS_PEACE');\n  }\n\n  /**\n   * Always peace.\n   * @type {boolean}\n   */\n  set alwaysPeace(newValue) {\n    this._setGameOption('GAMEOPTION_ALWAYS_PEACE', newValue);\n  }\n\n  /**\n   * Always war.\n   * @type {boolean}\n   * @throws {ParseError} Error while parsing the save file.\n   */\n  get alwaysWar() {\n    return this._getGameOption('GAMEOPTION_ALWAYS_WAR');\n  }\n\n  /**\n   * Always war.\n   * @type {boolean}\n   */\n  set alwaysWar(newValue) {\n    this._setGameOption('GAMEOPTION_ALWAYS_WAR', newValue);\n  }\n\n  /**\n   * Complete kills.\n   * @type {boolean}\n   * @throws {ParseError} Error while parsing the save file.\n   */\n  get completeKills() {\n    return this._getGameOption('GAMEOPTION_COMPLETE_KILLS');\n  }\n\n  /**\n   * Complete kills.\n   * @type {boolean}\n   */\n  set completeKills(newValue) {\n    this._setGameOption('GAMEOPTION_COMPLETE_KILLS', newValue);\n  }\n\n  /**\n   * Lock mods.\n   * @type {boolean}\n   * @throws {ParseError} Error while parsing the save file.\n   */\n  get lockMods() {\n    return this._getGameOption('GAMEOPTION_LOCK_MODS');\n  }\n\n  /**\n   * Lock mods.\n   * @type {boolean}\n   */\n  set lockMods(newValue) {\n    this._setGameOption('GAMEOPTION_LOCK_MODS', newValue);\n  }\n\n  /**\n   * New random seed.\n   * @type {boolean}\n   * @throws {ParseError} Error while parsing the save file.\n   */\n  get newRandomSeed() {\n    return this._getGameOption('GAMEOPTION_NEW_RANDOM_SEED');\n  }\n\n  /**\n   * New random seed.\n   * @type {boolean}\n   */\n  set newRandomSeed(newValue) {\n    this._setGameOption('GAMEOPTION_NEW_RANDOM_SEED', newValue);\n  }\n\n  /**\n   * No barbarians.\n   * @type {boolean}\n   * @throws {ParseError} Error while parsing the save file.\n   */\n  get noBarbarians() {\n    return this._getGameOption('GAMEOPTION_NO_BARBARIANS');\n  }\n\n  /**\n   * No barbarians.\n   * @type {boolean}\n   */\n  set noBarbarians(newValue) {\n    this._setGameOption('GAMEOPTION_NO_BARBARIANS', newValue);\n  }\n\n  /**\n   * No changing war or peace.\n   * @type {boolean}\n   * @throws {ParseError} Error while parsing the save file.\n   */\n  get noChangingWarPeace() {\n    return this._getGameOption('GAMEOPTION_NO_CHANGING_WAR_PEACE');\n  }\n\n  /**\n   * No changing war or peace.\n   * @type {boolean}\n   */\n  set noChangingWarPeace(newValue) {\n    this._setGameOption('GAMEOPTION_NO_CHANGING_WAR_PEACE', newValue);\n  }\n\n  /**\n   * No city razing.\n   * @type {boolean}\n   * @throws {ParseError} Error while parsing the save file.\n   */\n  get noCityRazing() {\n    return this._getGameOption('GAMEOPTION_NO_CITY_RAZING');\n  }\n\n  /**\n   * No city razing.\n   * @type {boolean}\n   */\n  set noCityRazing(newValue) {\n    this._setGameOption('GAMEOPTION_NO_CITY_RAZING', newValue);\n  }\n\n  /**\n   * No cultural overview UI.\n   * @type {boolean}\n   * @throws {ParseError} Error while parsing the save file.\n   */\n  get noCultureOverviewUI() {\n    return this._getGameOption('GAMEOPTION_NO_CULTURE_OVERVIEW_UI');\n  }\n\n  /**\n   * No cultural overview UI.\n   * @type {boolean}\n   */\n  set noCultureOverviewUI(newValue) {\n    this._setGameOption('GAMEOPTION_NO_CULTURE_OVERVIEW_UI', newValue);\n  }\n\n  /**\n   * No espionage.\n   * @type {boolean}\n   * @throws {ParseError} Error while parsing the save file.\n   */\n  get noEspionage() {\n    return this._getGameOption('GAMEOPTION_NO_ESPIONAGE');\n  }\n\n  /**\n   * No espionage.\n   * @type {boolean}\n   */\n  set noEspionage(newValue) {\n    this._setGameOption('GAMEOPTION_NO_ESPIONAGE', newValue);\n  }\n\n  /**\n   * No happiness.\n   * @type {boolean}\n   * @throws {ParseError} Error while parsing the save file.\n   */\n  get noHappiness() {\n    return this._getGameOption('GAMEOPTION_NO_HAPPINESS');\n  }\n\n  /**\n   * No happiness.\n   * @type {boolean}\n   */\n  set noHappiness(newValue) {\n    this._setGameOption('GAMEOPTION_NO_HAPPINESS', newValue);\n  }\n\n  /**\n   * No policies.\n   * @type {boolean}\n   * @throws {ParseError} Error while parsing the save file.\n   */\n  get noPolicies() {\n    return this._getGameOption('GAMEOPTION_NO_POLICIES');\n  }\n\n  /**\n   * No policies.\n   * @type {boolean}\n   */\n  set noPolicies(newValue) {\n    this._setGameOption('GAMEOPTION_NO_POLICIES', newValue);\n  }\n\n  /**\n   * No religion.\n   * @type {boolean}\n   * @throws {ParseError} Error while parsing the save file.\n   */\n  get noReligion() {\n    return this._getGameOption('GAMEOPTION_NO_RELIGION');\n  }\n\n  /**\n   * No religion.\n   * @type {boolean}\n   */\n  set noReligion(newValue) {\n    this._setGameOption('GAMEOPTION_NO_RELIGION', newValue);\n  }\n\n  /**\n   * No science.\n   * @type {boolean}\n   * @throws {ParseError} Error while parsing the save file.\n   */\n  get noScience() {\n    return this._getGameOption('GAMEOPTION_NO_SCIENCE');\n  }\n\n  /**\n   * No science.\n   * @type {boolean}\n   */\n  set noScience(newValue) {\n    this._setGameOption('GAMEOPTION_NO_SCIENCE', newValue);\n  }\n\n  /**\n   * No world congress.\n   * @type {boolean}\n   * @throws {ParseError} Error while parsing the save file.\n   */\n  get noWorldCongress() {\n    return this._getGameOption('GAMEOPTION_NO_LEAGUES');\n  }\n\n  /**\n   * No world congress.\n   * @type {boolean}\n   */\n  set noWorldCongress(newValue) {\n    this._setGameOption('GAMEOPTION_NO_LEAGUES', newValue);\n  }\n\n  /**\n   * One-city challenge.\n   * @type {boolean}\n   * @throws {ParseError} Error while parsing the save file.\n   */\n  get oneCityChallenge() {\n    return this._getGameOption('GAMEOPTION_ONE_CITY_CHALLENGE');\n  }\n\n  /**\n   * One-city challenge.\n   * @type {boolean}\n   */\n  set oneCityChallenge(newValue) {\n    this._setGameOption('GAMEOPTION_ONE_CITY_CHALLENGE', newValue);\n  }\n\n  /**\n   * Pitboss.\n   * @type {boolean}\n   * @throws {ParseError} Error while parsing the save file.\n   * @see https://github.com/Bownairo/Civ5SaveEditor\n   */\n  get pitboss() {\n    return this._getGameOption('GAMEOPTION_PITBOSS');\n  }\n\n  /**\n   * Pitboss.\n   * @type {boolean}\n   * @see https://github.com/Bownairo/Civ5SaveEditor\n   */\n  set pitboss(newValue) {\n    this._setGameOption('GAMEOPTION_PITBOSS', newValue);\n  }\n\n  /**\n   * Policy saving.\n   * @type {boolean}\n   * @throws {ParseError} Error while parsing the save file.\n   */\n  get policySaving() {\n    return this._getGameOption('GAMEOPTION_POLICY_SAVING');\n  }\n\n  /**\n   * Policy saving.\n   * @type {boolean}\n   */\n  set policySaving(newValue) {\n    this._setGameOption('GAMEOPTION_POLICY_SAVING', newValue);\n  }\n\n  /**\n   * Promotion saving.\n   * @type {boolean}\n   * @throws {ParseError} Error while parsing the save file.\n   */\n  get promotionSaving() {\n    return this._getGameOption('GAMEOPTION_PROMOTION_SAVING');\n  }\n\n  /**\n   * Promotion saving.\n   * @type {boolean}\n   */\n  set promotionSaving(newValue) {\n    this._setGameOption('GAMEOPTION_PROMOTION_SAVING', newValue);\n  }\n\n  /**\n   * Raging barbarians.\n   * @type {boolean}\n   * @throws {ParseError} Error while parsing the save file.\n   */\n  get ragingBarbarians() {\n    return this._getGameOption('GAMEOPTION_RAGING_BARBARIANS');\n  }\n\n  /**\n   * Raging barbarians.\n   * @type {boolean}\n   */\n  set ragingBarbarians(newValue) {\n    this._setGameOption('GAMEOPTION_RAGING_BARBARIANS', newValue);\n  }\n\n  /**\n   * Random personalities.\n   * @type {boolean}\n   * @throws {ParseError} Error while parsing the save file.\n   */\n  get randomPersonalities() {\n    return this._getGameOption('GAMEOPTION_RANDOM_PERSONALITIES');\n  }\n\n  /**\n   * Random personalities.\n   * @type {boolean}\n   */\n  set randomPersonalities(newValue) {\n    this._setGameOption('GAMEOPTION_RANDOM_PERSONALITIES', newValue);\n  }\n\n  /**\n   * Turn timer enabled.\n   * @type {boolean}\n   * @throws {ParseError} Error while parsing the save file.\n   */\n  get turnTimerEnabled() {\n    return this._getGameOption('GAMEOPTION_END_TURN_TIMER_ENABLED');\n  }\n\n  /**\n   * Turn timer enabled.\n   * @type {boolean}\n   */\n  set turnTimerEnabled(newValue) {\n    this._setGameOption('GAMEOPTION_END_TURN_TIMER_ENABLED', newValue);\n  }\n\n  /**\n   * Turn mode: one of `Civ5Save.TURN_MODES.HYBRID`, `Civ5Save.TURN_MODES.SEQUENTIAL`, or\n   *     `Civ5Save.TURN_MODES.SIMULTANEOUS`.\n   * @type {string}\n   * @throws {ParseError} Error while parsing the save file.\n   * @see http://blog.frank-mich.com/civilization-v-how-to-change-turn-type-of-a-started-game/\n   */\n  get turnMode() {\n    if (this._getGameOption('GAMEOPTION_DYNAMIC_TURNS') === true) {\n      return Civ5Save.TURN_MODES.HYBRID;\n    } else if (this._getGameOption('GAMEOPTION_SIMULTANEOUS_TURNS') === true) {\n      return Civ5Save.TURN_MODES.SIMULTANEOUS;\n    } else if (this._getGameOption('GAMEOPTION_DYNAMIC_TURNS') === false &&\n      this._getGameOption('GAMEOPTION_SIMULTANEOUS_TURNS') === false) {\n      return Civ5Save.TURN_MODES.SEQUENTIAL;\n    }\n  }\n\n  /**\n   * Turn mode: one of `Civ5Save.TURN_MODES.HYBRID`, `Civ5Save.TURN_MODES.SEQUENTIAL`, or\n   *     `Civ5Save.TURN_MODES.SIMULTANEOUS`.\n   * @type {string}\n   * @see http://blog.frank-mich.com/civilization-v-how-to-change-turn-type-of-a-started-game/\n   */\n  set turnMode(newValue) {\n    if (newValue === Civ5Save.TURN_MODES.HYBRID) {\n      this._setGameOption('GAMEOPTION_DYNAMIC_TURNS', true);\n      this._setGameOption('GAMEOPTION_SIMULTANEOUS_TURNS', false);\n    } else if (newValue === Civ5Save.TURN_MODES.SIMULTANEOUS) {\n      this._setGameOption('GAMEOPTION_DYNAMIC_TURNS', false);\n      this._setGameOption('GAMEOPTION_SIMULTANEOUS_TURNS', true);\n    } else if (newValue === Civ5Save.TURN_MODES.SEQUENTIAL) {\n      this._setGameOption('GAMEOPTION_DYNAMIC_TURNS', false);\n      this._setGameOption('GAMEOPTION_SIMULTANEOUS_TURNS', false);\n    }\n  }\n\n  /**\n   * @private\n   * @throws {ParseError} Error while parsing the save file.\n   */\n  _getPropertyIfDefined(propertyName) {\n    if (this._properties.hasOwnProperty(propertyName)) {\n      try {\n        return this._properties[propertyName].getValue(this._saveData);\n      } catch (e) {\n        throw new ParseError(`Failure parsing save at property ${propertyName}`);\n      }\n    }\n  }\n\n  /**\n   * @private\n   * @throws {ParseError} Error while parsing the save file.\n   */\n  _getBeautifiedPropertyIfDefined(propertyName) {\n    if (this._properties.hasOwnProperty(propertyName)) {\n      try {\n        return this._beautifyPropertyValue(this._properties[propertyName].getValue(this._saveData));\n      } catch (e) {\n        throw new ParseError(`Failure parsing save at property ${propertyName}`);\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  _beautifyPropertyValue(propertyValue) {\n    propertyValue = propertyValue.split('_')[1];\n    propertyValue = propertyValue.toLowerCase();\n    propertyValue = propertyValue.charAt(0).toUpperCase() + propertyValue.slice(1);\n    return propertyValue;\n  }\n\n  /**\n   * @private\n   */\n  _beautifyMapFileValue(mapFileValue) {\n    mapFileValue = mapFileValue.split('/').slice(-1)[0];\n    mapFileValue = mapFileValue.split('\\\\').slice(-1)[0];\n    mapFileValue = mapFileValue.substring(0, mapFileValue.lastIndexOf('.'));\n    mapFileValue = mapFileValue.replace(/_/g, ' ');\n    return mapFileValue;\n  }\n\n  /**\n   * @private\n   * @throws {ParseError} Error while parsing the save file.\n   */\n  _getGameOption(gameOptionKey) {\n    try {\n      return this._properties.gameOptionsMap.getValue(this._saveData, gameOptionKey);\n    } catch (e) {\n      throw new ParseError(`Failure parsing save at property ${gameOptionKey}`);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _setGameOption(gameOptionKey, gameOptionNewValue) {\n    let newSaveData = this._properties.gameOptionsMap.setValue(this._saveData, gameOptionKey, gameOptionNewValue);\n    if (!this._isNullOrUndefined(newSaveData)) {\n      this._saveData = newSaveData;\n    }\n  }\n}\n\n// TODO: Turn these into class fields once the proposal makes it into the spec (https://github.com/tc39/proposals)\nCiv5Save.GAME_MODES = {\n  SINGLE: 'Single player',\n  MULTI: 'Multiplayer',\n  HOTSEAT: 'Hotseat'\n};\n\nCiv5Save.PLAYER_STATUSES = {\n  AI: 'AI',\n  DEAD: 'Dead',\n  HUMAN: 'Human',\n  NONE: 'None'\n};\n\nCiv5Save.TURN_MODES = {\n  HYBRID: 'Hybrid',\n  SEQUENTIAL: 'Sequential',\n  SIMULTANEOUS: 'Simultaneous'\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Civ5Save);\n\n/**\n * Error signifying the file signature is invalid for a Civ5Save file.\n */\nclass InvalidSignatureError extends _ExtendableError__WEBPACK_IMPORTED_MODULE_3__[\"default\"] {}\n\n/**\n * Error signifying there was a problem parsing the save file.\n */\nclass ParseError extends _ExtendableError__WEBPACK_IMPORTED_MODULE_3__[\"default\"] {}\n\n\n//# sourceURL=webpack://Civ5Save/./src/Civ5Save.js?");

/***/ }),

/***/ "./src/Civ5SaveBoolProperty.js":
/*!*************************************!*\
  !*** ./src/Civ5SaveBoolProperty.js ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Civ5SaveBoolProperty; });\n/* harmony import */ var _Civ5SaveProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Civ5SaveProperty */ \"./src/Civ5SaveProperty.js\");\n\n\n/**\n * @ignore\n */\nclass Civ5SaveBoolProperty extends _Civ5SaveProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n  /**\n   * @ignore\n   */\n  getValue(saveData) {\n    if (this.length === 1) {\n      return Boolean(saveData.getUint8(this.byteOffset));\n    } else if (this.length === 4) {\n      return Boolean(saveData.getUint32(this.byteOffset, true));\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  setValue(saveData, newValue) {\n    if (this.length === 1) {\n      saveData.setUint8(this.byteOffset, Number(newValue));\n    } else if (this.length === 4) {\n      saveData.setUint32(this.byteOffset, Number(newValue), true);\n    }\n  }\n}\n\n\n//# sourceURL=webpack://Civ5Save/./src/Civ5SaveBoolProperty.js?");

/***/ }),

/***/ "./src/Civ5SaveDLCStringArray.js":
/*!***************************************!*\
  !*** ./src/Civ5SaveDLCStringArray.js ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Civ5SaveDLCStringArray; });\n/* harmony import */ var _Civ5SaveIntProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Civ5SaveIntProperty */ \"./src/Civ5SaveIntProperty.js\");\n/* harmony import */ var _Civ5SaveStringProperty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Civ5SaveStringProperty */ \"./src/Civ5SaveStringProperty.js\");\n\n\n\n/**\n * @ignore\n */\nclass Civ5SaveDLCStringArray {\n  /**\n   * @ignore\n   */\n  constructor(byteOffset, saveData) {\n    /**\n     * @ignore\n     */\n    this.byteOffset = byteOffset;\n    /**\n     * @ignore\n     */\n    this.length = 4;\n    /**\n     * @private\n     */\n    this._array = new Array();\n    /**\n     * @private\n     */\n    this._size = new _Civ5SaveIntProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this.byteOffset, 4, saveData);\n\n    if (this._getSize(saveData) > 0) {\n      let currentByteOffset = this.byteOffset + 4;\n      for (let i = 0; i < this._getSize(saveData); i++) {\n        // Skip 16 byte unique identifier followed by 0100 0000\n        currentByteOffset += 20;\n        let dlcName = new _Civ5SaveStringProperty__WEBPACK_IMPORTED_MODULE_1__[\"default\"](currentByteOffset, null, saveData);\n        currentByteOffset += dlcName.length;\n\n        this._array.push(dlcName.getValue(saveData));\n      }\n\n      this.length = currentByteOffset - this.byteOffset;\n    }\n\n    Object.freeze(this._array);\n  }\n\n  /**\n   * @private\n   */\n  _getSize(saveData) {\n    return this._size.getValue(saveData);\n  }\n\n  /**\n   * @ignore\n   */\n  getArray() {\n    return this._array;\n  }\n}\n\n\n//# sourceURL=webpack://Civ5Save/./src/Civ5SaveDLCStringArray.js?");

/***/ }),

/***/ "./src/Civ5SaveDataView.js":
/*!*********************************!*\
  !*** ./src/Civ5SaveDataView.js ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Civ5SaveDataView; });\n/**\n * @ignore\n */\n// Subclassing DataView in babel requires https://www.npmjs.com/package/babel-plugin-transform-builtin-extend\nclass Civ5SaveDataView extends DataView {\n  /**\n   * @ignore\n   */\n  getString(byteOffset, byteLength) {\n    if (typeof TextDecoder === 'function') {\n      return new TextDecoder().decode(this.buffer.slice(byteOffset, byteOffset + byteLength));\n    } else {\n      // https://stackoverflow.com/a/17192845/399105\n      let encodedString = String.fromCharCode.apply(null, new Uint8Array(this.buffer.slice(byteOffset,\n        byteOffset + byteLength)));\n      return decodeURIComponent(escape(encodedString));\n    }\n  }\n}\n\n\n//# sourceURL=webpack://Civ5Save/./src/Civ5SaveDataView.js?");

/***/ }),

/***/ "./src/Civ5SaveIntArray.js":
/*!*********************************!*\
  !*** ./src/Civ5SaveIntArray.js ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Civ5SaveIntArray; });\n/* harmony import */ var _Civ5SaveIntProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Civ5SaveIntProperty */ \"./src/Civ5SaveIntProperty.js\");\n\n\n/**\n * @ignore\n */\nclass Civ5SaveIntArray {\n  /**\n   * @ignore\n   */\n  constructor(byteOffset, items, saveData) {\n    /**\n     * @ignore\n     */\n    this.byteOffset = byteOffset;\n    /**\n     * @private\n     */\n    this._array = new Array();\n\n    let currentByteOffset = this.byteOffset;\n    for (let i = 0; i < items; i++) {\n      let arrayItem = new _Civ5SaveIntProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"](currentByteOffset, 4, saveData);\n      currentByteOffset += arrayItem.length;\n      this._array.push(arrayItem.getValue(saveData));\n    }\n\n    /**\n     * @ignore\n     */\n    this.length = currentByteOffset - this.byteOffset;\n    Object.freeze(this._array);\n  }\n\n  /**\n   * @ignore\n   */\n  getArray() {\n    return this._array;\n  }\n}\n\n\n//# sourceURL=webpack://Civ5Save/./src/Civ5SaveIntArray.js?");

/***/ }),

/***/ "./src/Civ5SaveIntProperty.js":
/*!************************************!*\
  !*** ./src/Civ5SaveIntProperty.js ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Civ5SaveIntProperty; });\n/* harmony import */ var _Civ5SaveProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Civ5SaveProperty */ \"./src/Civ5SaveProperty.js\");\n\n\n/**\n * @ignore\n */\nclass Civ5SaveIntProperty extends _Civ5SaveProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n  /**\n   * @ignore\n   */\n  getValue(saveData) {\n    if (this.length === 1) {\n      return saveData.getUint8(this.byteOffset);\n    } else if (this.length === 4) {\n      return saveData.getUint32(this.byteOffset, true);\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  setValue(saveData, newValue) {\n    if (this.length === 1) {\n      saveData.setUint8(this.byteOffset, newValue);\n    } else if (this.length === 4) {\n      saveData.setUint32(this.byteOffset, newValue, true);\n    }\n  }\n}\n\n\n//# sourceURL=webpack://Civ5Save/./src/Civ5SaveIntProperty.js?");

/***/ }),

/***/ "./src/Civ5SaveModsStringArray.js":
/*!****************************************!*\
  !*** ./src/Civ5SaveModsStringArray.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Civ5SaveModsStringArray; });\n/* harmony import */ var _Civ5SaveIntProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Civ5SaveIntProperty */ \"./src/Civ5SaveIntProperty.js\");\n/* harmony import */ var _Civ5SaveStringProperty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Civ5SaveStringProperty */ \"./src/Civ5SaveStringProperty.js\");\n\n\n\n/**\n * @ignore\n */\nclass Civ5SaveModsStringArray {\n  /**\n   * @ignore\n   */\n  constructor(byteOffset, saveData) {\n    /**\n     * @ignore\n     */\n    this.byteOffset = byteOffset;\n    /**\n     * @ignore\n     */\n    this.length = 4;\n    /**\n     * @private\n     */\n    this._array = new Array();\n    /**\n     * @private\n     */\n    this._size = new _Civ5SaveIntProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this.byteOffset, 4, saveData);\n\n    if (this._getSize(saveData) > 0) {\n      let currentByteOffset = this.byteOffset + 4;\n      for (let i = 0; i < this._getSize(saveData); i++) {\n        let modId = new _Civ5SaveStringProperty__WEBPACK_IMPORTED_MODULE_1__[\"default\"](currentByteOffset, null, saveData);\n        currentByteOffset += modId.length;\n\n        // Not sure what these extra bytes represent\n        currentByteOffset += 4;\n\n        let modName = new _Civ5SaveStringProperty__WEBPACK_IMPORTED_MODULE_1__[\"default\"](currentByteOffset, null, saveData);\n        currentByteOffset += modName.length;\n\n        this._array.push(modName.getValue(saveData));\n      }\n\n      this.length = currentByteOffset - this.byteOffset;\n    }\n\n    Object.freeze(this._array);\n  }\n\n  /**\n   * @private\n   */\n  _getSize(saveData) {\n    return this._size.getValue(saveData);\n  }\n\n  /**\n   * @ignore\n   */\n  getArray() {\n    return this._array;\n  }\n}\n\n\n//# sourceURL=webpack://Civ5Save/./src/Civ5SaveModsStringArray.js?");

/***/ }),

/***/ "./src/Civ5SaveProperty.js":
/*!*********************************!*\
  !*** ./src/Civ5SaveProperty.js ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Civ5SaveProperty; });\n/**\n * @ignore\n */\nclass Civ5SaveProperty {\n  /**\n   * @ignore\n   */\n  constructor(byteOffset, length) {\n    /**\n     * @ignore\n     */\n    this.byteOffset = byteOffset;\n    /**\n     * @ignore\n     */\n    this.length = length;\n  }\n}\n\n\n//# sourceURL=webpack://Civ5Save/./src/Civ5SaveProperty.js?");

/***/ }),

/***/ "./src/Civ5SavePropertyDefinitions.js":
/*!********************************************!*\
  !*** ./src/Civ5SavePropertyDefinitions.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  'fileSignature': {\n    'byteOffsetInSection': 0,\n    'length': 4,\n    'sectionByBuild': {\n      '98650': 1\n    },\n    'type': 'string',\n    // Game build is a later property and not yet defined, so the section will need to be determined without it\n    getSection() {\n      return 1;\n    }\n  },\n  'saveGameVersion': {\n    'byteOffsetInSection': 4,\n    'length': 4,\n    'sectionByBuild': {\n      '98650': 1\n    },\n    'type': 'int',\n    // Game build is a later property and not yet defined, so the section will need to be determined without it\n    getSection() {\n      return 1;\n    }\n  },\n  // This property is updated if the game is saved with a newer version of Civ 5\n  'gameVersion': {\n    'byteOffsetInSection': 8,\n    'length': null,\n    'sectionByBuild': {\n      '230620': 1\n    },\n    'type': 'string',\n    // Game build is a later property and not yet defined, so the section will need to be determined without it\n    getSection(saveGameVersion) {\n      if (saveGameVersion >= 7) {\n        return 1;\n      } else {\n        return null;\n      }\n    }\n  },\n  // This property is updated if the game is saved with a newer version of Civ 5. The build of Civ 5 that was originally\n  // used when the save file was created is stored later, after gameOptionsMap.\n  'gameBuild': {\n    'byteOffsetInSection': null,\n    'length': null,\n    'sectionByBuild': {\n      '230620': 1\n    },\n    'type': 'string',\n    // Game build is not yet defined, so the section will need to be determined without it\n    getSection(saveGameVersion) {\n      if (saveGameVersion >= 7) {\n        return 1;\n      } else {\n        return null;\n      }\n    }\n  },\n  'currentTurn': {\n    'byteOffsetInSection': null,\n    'length': 4,\n    'sectionByBuild': {\n      '98650': 1\n    },\n    'type': 'int'\n  },\n  // This property exists in all versions but only seems to gain significance around build 230620\n  'gameMode': {\n    'byteOffsetInSection': null,\n    'length': 1,\n    'sectionByBuild': {\n      '98650': 1\n    },\n    'type': 'int',\n    'values': [\n      'Single player',\n      'Multiplayer',\n      'Hotseat'\n    ]\n  },\n  'player1Civilization': {\n    'byteOffsetInSection': null,\n    'length': null,\n    'sectionByBuild': {\n      '98650': 1\n    },\n    'type': 'string'\n  },\n  'difficulty': {\n    'byteOffsetInSection': null,\n    'length': null,\n    'sectionByBuild': {\n      '98650': 1\n    },\n    'type': 'string'\n  },\n  'startingEra': {\n    'byteOffsetInSection': null,\n    'length': null,\n    'sectionByBuild': {\n      '98650': 1\n    },\n    'type': 'string'\n  },\n  'currentEra': {\n    'byteOffsetInSection': null,\n    'length': null,\n    'sectionByBuild': {\n      '98650': 1\n    },\n    'type': 'string'\n  },\n  'gamePace': {\n    'byteOffsetInSection': null,\n    'length': null,\n    'sectionByBuild': {\n      '98650': 1\n    },\n    'type': 'string'\n  },\n  'mapSize': {\n    'byteOffsetInSection': null,\n    'length': null,\n    'sectionByBuild': {\n      '98650': 1\n    },\n    'type': 'string'\n  },\n  // The map file appears multiple times; I have no idea why (see section19Map)\n  'mapFile': {\n    'byteOffsetInSection': null,\n    'length': null,\n    'sectionByBuild': {\n      '98650': 1\n    },\n    'type': 'string'\n  },\n  'enabledDLC': {\n    'byteOffsetInSection': null,\n    'length': null,\n    'sectionByBuild': {\n      '98650': 1\n    },\n    'type': 'dlcStringArray'\n  },\n  'enabledMods': {\n    'byteOffsetInSection': null,\n    'length': null,\n    'sectionByBuild': {\n      '98650': 1\n    },\n    'type': 'modsStringArray'\n  },\n  // Players after the first player marked as none seem to be superfluous\n  // See SlotStatus in the SDK: CvGameCoreSource/CvGameCoreDLLUtil/include/CvEnums.h\n  'playerStatuses': {\n    'byteOffsetInSection': 4,\n    // Length is number of items, not bytes\n    'length': 64,\n    'sectionByBuild': {\n      '98650': 4\n    },\n    'type': 'intArray',\n    'values': [\n      '',\n      'AI',\n      'Dead',\n      'Human',\n      'None'\n    ]\n  },\n  // Starting with build 310700 this is a list of strings. Before that I'm not sure if it's a list of bytes or not there\n  // at all\n  'playerCivilizations': {\n    'byteOffsetInSection': 4,\n    // Length is number of items, not bytes\n    'length': 64,\n    'sectionByBuild': {\n      '310700': 8\n    },\n    'type': 'stringArray'\n  },\n  // This seems to be very rare (https://github.com/bmaupin/civ5save-editor/issues/6)\n  'section19SkipPlayer1Leader': {\n    'byteOffsetInSection': 4,\n    'length': null,\n    'sectionByBuild': {\n      '98650': 17,\n      '262623': 18,\n      '395070': 19\n    },\n    'type': 'string'\n  },\n  'section19Skip1': {\n    'byteOffsetInSection': null,\n    'length': 252,\n    'sectionByBuild': {\n      '98650': 17,\n      '262623': 18,\n      '395070': 19\n    },\n    'type': 'bytes'\n  },\n  // This is rare but seems to contain the full path to the save file, e.g.\n  // C:\\Users\\Username\\Documents\\My Games\\Sid Meier's Civilization 5\\Saves\\multi\\auto\\AutoSave_0310 AD-2030.Civ5Save\n  'section19SkipSavePath': {\n    'byteOffsetInSection': null,\n    'length': null,\n    'sectionByBuild': {\n      '98650': 17,\n      '262623': 18,\n      '395070': 19\n    },\n    'type': 'string'\n  },\n  // This appears to contain the current OS username\n  'section19SkipUsername': {\n    'byteOffsetInSection': null,\n    'length': null,\n    'sectionByBuild': {\n      '98650': 17,\n      '262623': 18,\n      '395070': 19\n    },\n    'type': 'string'\n  },\n  'section19Skip2': {\n    'byteOffsetInSection': null,\n    'length': 7,\n    'sectionByBuild': {\n      '98650': 17,\n      '262623': 18,\n      '395070': 19\n    },\n    'type': 'bytes'\n  },\n  'section19Map': {\n    'byteOffsetInSection': null,\n    'length': null,\n    'sectionByBuild': {\n      '98650': 17,\n      '262623': 18,\n      '395070': 19\n    },\n    'type': 'string'\n  },\n  'section19Skip3': {\n    'byteOffsetInSection': null,\n    'length': 4,\n    'sectionByBuild': {\n      '98650': 17,\n      '262623': 18,\n      '395070': 19\n    },\n    'type': 'bytes'\n  },\n  // https://gaming.stackexchange.com/a/273907/154341\n  'maxTurns': {\n    'byteOffsetInSection': null,\n    'length': 4,\n    'sectionByBuild': {\n      '98650': 17,\n      '262623': 18,\n      '395070': 19\n    },\n    'type': 'int'\n  },\n  // This seems to be the second place in the file with player names\n  'playerNames2': {\n    'byteOffsetInSection': 4,\n    // Length is number of items, not bytes\n    'length': 64,\n    'sectionByBuild': {\n      '98650': 21,\n      '262623': 22,\n      '395070': 23\n    },\n    'type': 'stringArray'\n  },\n  'section23Skip1': {\n    'byteOffsetInSection': null,\n    'length': 4,\n    'sectionByBuild': {\n      '98650': 21,\n      '262623': 22,\n      '395070': 23\n    },\n    'type': 'int'\n  },\n  // https://steamcommunity.com/app/8930/discussions/0/864973761026018000/#c619568192863618582\n  'turnTimerLength': {\n    'byteOffsetInSection': null,\n    'length': 4,\n    'sectionByBuild': {\n      '98650': 21,\n      '262623': 22,\n      '395070': 23\n    },\n    'type': 'int'\n  },\n  'playerColours': {\n    'byteOffsetInSection': 4,\n    // Length is number of items, not bytes\n    'length': 64,\n    // This is technically incorrect; before build 310700 this property exists, but it's a list of bytes instead of a\n    // list of strings, and there isn't much value in adding the extra complexity for old save games. For reference, the\n    // correct values are:\n    //  '98650': 23,\n    //  '262623': 24,\n    //  '395070': 25\n    'sectionByBuild': {\n      '310700': 24,\n      '395070': 25\n    },\n    'type': 'stringArray'\n  },\n  // https://github.com/Canardlaquay/Civ5SavePrivate\n  'privateGame': {\n    'byteOffsetInSection': null,\n    'length': 1,\n    // As with playerColours, this is technically incorrect, but there isn't much value in implementing this for older\n    // games because 1. it would require implementing playerColours and 2. it's only relevant for multiplayer games,\n    // however logic for identifying multiplayer games before build 230620 hasn't been implemented (see gameMode)\n    'sectionByBuild': {\n      '310700': 24,\n      '395070': 25\n    },\n    'type': 'bool'\n  },\n  'section29Skip1': {\n    'byteOffsetInSection': 4,\n    'length': null,\n    'sectionByBuild': {\n      '98650': 27,\n      '262623': 28,\n      '395070': 29\n    },\n    'type': 'bytes',\n    getLength(enabledDLC, enabledMods) {\n      let length = 265;\n      if (enabledMods.includes('(1) Community Patch')) {\n        // Account for 0xDEADBEEF and mod version number (https://github.com/LoneGazebo/Community-Patch-DLL/blob/72137235dbab0c78d0c65a4b2ea33bad85b9ef61/CvGameCoreDLL_Expansion2/CustomMods.h#L1334)\n        length += 8;\n      }\n      return length;\n    }\n  },\n  'section29Timer1': {\n    'byteOffsetInSection': null,\n    'length': null,\n    'sectionByBuild': {\n      '98650': 27,\n      '262623': 28,\n      '395070': 29\n    },\n    'type': 'string'\n  },\n  'section29Skip2': {\n    'byteOffsetInSection': null,\n    'length': 12,\n    'sectionByBuild': {\n      '98650': 27,\n      '262623': 28,\n      '395070': 29\n    },\n    'type': 'bytes'\n  },\n  'section29TurnTimer': {\n    'byteOffsetInSection': null,\n    'length': null,\n    'sectionByBuild': {\n      '98650': 27,\n      '262623': 28,\n      '395070': 29\n    },\n    'type': 'string'\n  },\n  'section29TxtKeyTurnTimer': {\n    'byteOffsetInSection': null,\n    'length': null,\n    'sectionByBuild': {\n      '98650': 27,\n      '262623': 28,\n      '395070': 29\n    },\n    'type': 'string'\n  },\n  'section29Timer2': {\n    'byteOffsetInSection': null,\n    'length': null,\n    'sectionByBuild': {\n      '98650': 27,\n      '262623': 28,\n      '395070': 29\n    },\n    'type': 'string'\n  },\n  'section29Skip3': {\n    'byteOffsetInSection': null,\n    'length': 25,\n    'sectionByBuild': {\n      '98650': 27,\n      '262623': 28,\n      '395070': 29\n    },\n    'type': 'bytes'\n  },\n  // https://gaming.stackexchange.com/a/273907/154341\n  'timeVictory': {\n    'byteOffsetInSection': null,\n    'length': 1,\n    'sectionByBuild': {\n      '98650': 27,\n      '262623': 28,\n      '395070': 29\n    },\n    'type': 'bool'\n  },\n  // https://gaming.stackexchange.com/a/273907/154341\n  'scienceVictory': {\n    'byteOffsetInSection': null,\n    'length': 1,\n    'sectionByBuild': {\n      '98650': 27,\n      '262623': 28,\n      '395070': 29\n    },\n    'type': 'bool'\n  },\n  // https://gaming.stackexchange.com/a/273907/154341\n  'dominationVictory': {\n    'byteOffsetInSection': null,\n    'length': 1,\n    'sectionByBuild': {\n      '98650': 27,\n      '262623': 28,\n      '395070': 29\n    },\n    'type': 'bool'\n  },\n  // https://gaming.stackexchange.com/a/273907/154341\n  'culturalVictory': {\n    'byteOffsetInSection': null,\n    'length': 1,\n    'sectionByBuild': {\n      '98650': 27,\n      '262623': 28,\n      '395070': 29\n    },\n    'type': 'bool'\n  },\n  // https://gaming.stackexchange.com/a/273907/154341\n  'diplomaticVictory': {\n    'byteOffsetInSection': null,\n    'length': 1,\n    'sectionByBuild': {\n      '98650': 27,\n      '262623': 28,\n      '395070': 29\n    },\n    'type': 'bool'\n  },\n  'section30Skip1': {\n    'byteOffsetInSection': 4,\n    'length': null,\n    'sectionByBuild': {\n      '98650': 28,\n      '262623': 29,\n      '395070': 30\n    },\n    'type': 'bytes',\n    getLength(enabledDLC, enabledMods) {\n      let length = 72;\n      if (enabledDLC.includes('Expansion - Gods and Kings') || enabledDLC.includes('Expansion - Brave New World')) {\n        length += 4;\n      }\n      if (enabledMods.includes('(1) Community Patch')) {\n        // Account for 0xDEADBEEF and mod version number (https://github.com/LoneGazebo/Community-Patch-DLL/blob/72137235dbab0c78d0c65a4b2ea33bad85b9ef61/CvGameCoreDLL_Expansion2/CustomMods.h#L1334)\n        length += 8;\n      }\n      return length;\n    }\n  },\n  'section30MapSize1': {\n    'byteOffsetInSection': null,\n    'length': null,\n    'sectionByBuild': {\n      '98650': 28,\n      '262623': 29,\n      '395070': 30\n    },\n    'type': 'string'\n  },\n  'section30TxtKeyMapHelp': {\n    'byteOffsetInSection': null,\n    'length': null,\n    'sectionByBuild': {\n      '98650': 28,\n      '262623': 29,\n      '395070': 30\n    },\n    'type': 'string'\n  },\n  'section30Skip2': {\n    'byteOffsetInSection': null,\n    'length': 8,\n    'sectionByBuild': {\n      '98650': 28,\n      '262623': 29,\n      '395070': 30\n    },\n    'type': 'bytes'\n  },\n  'section30MapSize2': {\n    'byteOffsetInSection': null,\n    'length': null,\n    'sectionByBuild': {\n      '98650': 28,\n      '262623': 29,\n      '395070': 30\n    },\n    'type': 'string'\n  },\n  'section30TxtKeyMapSize': {\n    'byteOffsetInSection': null,\n    'length': null,\n    'sectionByBuild': {\n      '98650': 28,\n      '262623': 29,\n      '395070': 30\n    },\n    'type': 'string'\n  },\n  'section30MapSize3': {\n    'byteOffsetInSection': null,\n    'length': null,\n    'sectionByBuild': {\n      '98650': 28,\n      '262623': 29,\n      '395070': 30\n    },\n    'type': 'string'\n  },\n  // A bunch of map properties which differ based on the map size, 4 bytes per property\n  // See CvWorldInfo::readFrom in the SDK: CvGameCoreSource/CvGameCoreDLL_Expansion2/CvInfos.cpp for the order of values\n  // See steamassets/assets/dlc/expansion2/gameplay/xml/gameinfo/civ5worlds.xml for values based on map size\n  'worldInfo': {\n    'byteOffsetInSection': null,\n    'length': null,\n    'sectionByBuild': {\n      '98650': 28,\n      '262623': 29,\n      '395070': 30\n    },\n    'type': 'bytes',\n    getLength(enabledDLC, enabledMods) {\n      let length = 72;\n      if (enabledDLC.includes('Expansion - Brave New World')) {\n        // Brave New World added MaxActiveReligions and NumCitiesTechCostMod\n        length += 8;\n      } else if (enabledDLC.includes('Expansion - Gods and Kings')) {\n        // Gods and Kings added MaxActiveReligions\n        length += 4;\n      }\n      // Community Patch adds multiple new properties\n      // See CvWorldInfo::readFrom in https://github.com/LoneGazebo/Community-Patch-DLL/blob/master/CvGameCoreDLL_Expansion2/CvInfos.cpp\n      if (enabledMods.includes('(1) Community Patch')) {\n        length += 20;\n      }\n      return length;\n    }\n  },\n  // This is where a large chunk of game options are stored\n  // (http://civilization.wikia.com/wiki/Module:Data/Civ5/BNW/GameOptions)\n  'gameOptionsMap': {\n    'byteOffsetInSection': null,\n    'length': null,\n    'sectionByBuild': {\n      '98650': 28,\n      '262623': 29,\n      '395070': 30\n    },\n    'type': 'stringToBoolMap'\n  }\n});\n\n\n//# sourceURL=webpack://Civ5Save/./src/Civ5SavePropertyDefinitions.js?");

/***/ }),

/***/ "./src/Civ5SavePropertyFactory.js":
/*!****************************************!*\
  !*** ./src/Civ5SavePropertyFactory.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Civ5SavePropertyFactory; });\n/* harmony import */ var _Civ5SaveBoolProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Civ5SaveBoolProperty */ \"./src/Civ5SaveBoolProperty.js\");\n/* harmony import */ var _Civ5SaveDLCStringArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Civ5SaveDLCStringArray */ \"./src/Civ5SaveDLCStringArray.js\");\n/* harmony import */ var _Civ5SaveIntArray__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Civ5SaveIntArray */ \"./src/Civ5SaveIntArray.js\");\n/* harmony import */ var _Civ5SaveIntProperty__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Civ5SaveIntProperty */ \"./src/Civ5SaveIntProperty.js\");\n/* harmony import */ var _Civ5SaveModsStringArray__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Civ5SaveModsStringArray */ \"./src/Civ5SaveModsStringArray.js\");\n/* harmony import */ var _Civ5SaveProperty__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Civ5SaveProperty */ \"./src/Civ5SaveProperty.js\");\n/* harmony import */ var _Civ5SaveStringArray__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Civ5SaveStringArray */ \"./src/Civ5SaveStringArray.js\");\n/* harmony import */ var _Civ5SaveStringProperty__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Civ5SaveStringProperty */ \"./src/Civ5SaveStringProperty.js\");\n/* harmony import */ var _Civ5SaveStringToBoolMap__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Civ5SaveStringToBoolMap */ \"./src/Civ5SaveStringToBoolMap.js\");\n\n\n\n\n\n\n\n\n\n\n/**\n * @ignore\n */\nclass Civ5SavePropertyFactory {\n  /**\n   * @ignore\n   */\n  static fromType(type, byteOffset, length, saveData) {\n    switch (type) {\n    case 'bool':\n      return new _Civ5SaveBoolProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"](byteOffset, length);\n\n    case 'bytes':\n      return new _Civ5SaveProperty__WEBPACK_IMPORTED_MODULE_5__[\"default\"](byteOffset, length);\n\n    case 'dlcStringArray':\n      return new _Civ5SaveDLCStringArray__WEBPACK_IMPORTED_MODULE_1__[\"default\"](byteOffset, saveData);\n\n    case 'int':\n      return new _Civ5SaveIntProperty__WEBPACK_IMPORTED_MODULE_3__[\"default\"](byteOffset, length);\n\n    case 'intArray':\n      return new _Civ5SaveIntArray__WEBPACK_IMPORTED_MODULE_2__[\"default\"](byteOffset, length, saveData);\n\n    case 'modsStringArray':\n      return new _Civ5SaveModsStringArray__WEBPACK_IMPORTED_MODULE_4__[\"default\"](byteOffset, saveData);\n\n    case 'string':\n      return new _Civ5SaveStringProperty__WEBPACK_IMPORTED_MODULE_7__[\"default\"](byteOffset, length, saveData);\n\n    case 'stringArray':\n      return new _Civ5SaveStringArray__WEBPACK_IMPORTED_MODULE_6__[\"default\"](byteOffset, length, saveData);\n\n    case 'stringToBoolMap':\n      return new _Civ5SaveStringToBoolMap__WEBPACK_IMPORTED_MODULE_8__[\"default\"](byteOffset, saveData);\n\n    default:\n      throw new Error(`Property type ${type} not handled`);\n    }\n  }\n}\n\n\n//# sourceURL=webpack://Civ5Save/./src/Civ5SavePropertyFactory.js?");

/***/ }),

/***/ "./src/Civ5SaveStringArray.js":
/*!************************************!*\
  !*** ./src/Civ5SaveStringArray.js ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Civ5SaveStringArray; });\n/* harmony import */ var _Civ5SaveStringProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Civ5SaveStringProperty */ \"./src/Civ5SaveStringProperty.js\");\n\n\n/**\n * @ignore\n */\nclass Civ5SaveStringArray {\n  /**\n   * @ignore\n   */\n  constructor(byteOffset, items, saveData) {\n    /**\n     * @ignore\n     */\n    this.byteOffset = byteOffset;\n    /**\n     * @private\n     */\n    this._array = new Array();\n\n    let currentByteOffset = this.byteOffset;\n    for (let i = 0; i < items; i++) {\n      let arrayItem = new _Civ5SaveStringProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"](currentByteOffset, null, saveData);\n      currentByteOffset += arrayItem.length;\n      this._array.push(arrayItem.getValue(saveData));\n    }\n\n    /**\n     * @ignore\n     */\n    this.length = currentByteOffset - this.byteOffset;\n    Object.freeze(this._array);\n  }\n\n  /**\n   * @ignore\n   */\n  getArray() {\n    return this._array;\n  }\n}\n\n\n//# sourceURL=webpack://Civ5Save/./src/Civ5SaveStringArray.js?");

/***/ }),

/***/ "./src/Civ5SaveStringProperty.js":
/*!***************************************!*\
  !*** ./src/Civ5SaveStringProperty.js ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Civ5SaveStringProperty; });\n/* harmony import */ var _Civ5SaveProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Civ5SaveProperty */ \"./src/Civ5SaveProperty.js\");\n\n\n/**\n * @ignore\n */\nclass Civ5SaveStringProperty extends _Civ5SaveProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n  /**\n   * @ignore\n   */\n  constructor(byteOffset, length, saveData) {\n    super(byteOffset, length);\n\n    if (this._isNullOrUndefined(this.length)) {\n      /**\n       * @ignore\n       */\n      this.length = this._getStringLength(saveData, this.byteOffset) + 4;\n    }\n  }\n\n  /**\n   * @private\n   */\n  _isNullOrUndefined(variable) {\n    return typeof variable === 'undefined' || variable === null;\n  }\n\n  /**\n   * @private\n   */\n  _getStringLength(saveData, byteOffset) {\n    return saveData.getUint32(byteOffset, true);\n  }\n\n  /**\n   * @ignore\n   */\n  getValue(saveData) {\n    return saveData.getString(this.byteOffset + 4, this.length - 4);\n  }\n}\n\n\n//# sourceURL=webpack://Civ5Save/./src/Civ5SaveStringProperty.js?");

/***/ }),

/***/ "./src/Civ5SaveStringToBoolMap.js":
/*!****************************************!*\
  !*** ./src/Civ5SaveStringToBoolMap.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Civ5SaveStringToBoolMap; });\n/* harmony import */ var _Civ5SaveBoolProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Civ5SaveBoolProperty */ \"./src/Civ5SaveBoolProperty.js\");\n/* harmony import */ var _Civ5SaveDataView__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Civ5SaveDataView */ \"./src/Civ5SaveDataView.js\");\n/* harmony import */ var _Civ5SaveIntProperty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Civ5SaveIntProperty */ \"./src/Civ5SaveIntProperty.js\");\n/* harmony import */ var _Civ5SaveStringProperty__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Civ5SaveStringProperty */ \"./src/Civ5SaveStringProperty.js\");\n\n\n\n\n\n/**\n * @ignore\n */\nclass Civ5SaveStringToBoolMap {\n  /**\n   * @ignore\n   */\n  constructor(byteOffset, saveData) {\n    /**\n     * @ignore\n     */\n    this.byteOffset = byteOffset;\n    /**\n     * @ignore\n     */\n    this.length = 4;\n    /**\n     * @private\n     */\n    this._items = new Map();\n    /**\n     * @private\n     */\n    this._size = new _Civ5SaveIntProperty__WEBPACK_IMPORTED_MODULE_2__[\"default\"](this.byteOffset, 4, saveData);\n\n    if (this._getSize(saveData) > 0) {\n      let currentByteOffset = this.byteOffset + 4;\n      for (let i = 0; i < this._getSize(saveData); i++) {\n        currentByteOffset = this._addItemToMap(saveData, currentByteOffset);\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  _addItemToMap(saveData, byteOffset) {\n    let itemKeyProperty = new _Civ5SaveStringProperty__WEBPACK_IMPORTED_MODULE_3__[\"default\"](byteOffset, null, saveData);\n    byteOffset += itemKeyProperty.length;\n    let itemValueProperty = new _Civ5SaveBoolProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"](byteOffset, 4, saveData);\n    byteOffset += itemValueProperty.length;\n\n    this._items.set(itemKeyProperty.getValue(saveData), itemValueProperty);\n    this.length = byteOffset - this.byteOffset;\n\n    return byteOffset;\n  }\n\n  /**\n   * @private\n   */\n  _getSize(saveData) {\n    return this._size.getValue(saveData);\n  }\n\n  /**\n   * @private\n   */\n  _setSize(saveData, newValue) {\n    this._size.setValue(saveData, newValue);\n  }\n\n  /**\n   * @ignore\n   */\n  getValue(saveData, itemKey) {\n    if (this._items.has(itemKey)) {\n      return this._items.get(itemKey).getValue(saveData);\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  setValue(saveData, itemKey, newItemValue) {\n    if (this._items.has(itemKey)) {\n      this._items.get(itemKey).setValue(saveData, newItemValue);\n\n    } else {\n      return this._addItemToSaveData(saveData, itemKey, newItemValue);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _addItemToSaveData(saveData, itemKey, newItemValue) {\n    this._setSize(saveData, this._getSize(saveData) + 1);\n\n    let itemKeyLengthArray = this._int32ToUint8Array(itemKey.length);\n    let itemKeyArray = this._stringToUint8Array(itemKey);\n    let itemValueArray = this._int32ToUint8Array(Number(newItemValue));\n    let arrayToInsert = this._concatTypedArrays(\n      this._concatTypedArrays(\n        itemKeyLengthArray,\n        itemKeyArray\n      ),\n      itemValueArray\n    );\n\n    let newSaveDataTypedArray = this._insertIntoTypedArray(\n      new Uint8Array(saveData.buffer),\n      arrayToInsert,\n      this.byteOffset + this.length);\n    let newSaveData = new _Civ5SaveDataView__WEBPACK_IMPORTED_MODULE_1__[\"default\"](newSaveDataTypedArray.buffer);\n\n    this._addItemToMap(newSaveData, this.byteOffset + this.length);\n\n    return newSaveData;\n  }\n\n  /**\n   * @private\n   */\n  // Inspired by https://stackoverflow.com/a/12965194/399105\n  _int32ToUint8Array(int32) {\n    let int32Array = new Uint8Array(4);\n    for (let i = 0; i < int32Array.length; i++) {\n      let byte = int32 & 0xff;\n      int32Array[i] = byte;\n      int32 = (int32 - byte) / 256;\n    }\n    return int32Array;\n  }\n\n  /**\n   * @private\n   */\n  _stringToUint8Array(string) {\n    let stringArray = new Uint8Array(string.length);\n    for (let i = 0; i < string.length; i++) {\n      stringArray[i] = string.charCodeAt(i);\n    }\n    return stringArray;\n  }\n\n  /**\n   * @private\n   */\n  // https://stackoverflow.com/a/33703102/399105\n  _concatTypedArrays(a, b) {\n    var c = new (a.constructor)(a.length + b.length);\n    c.set(a, 0);\n    c.set(b, a.length);\n    return c;\n  }\n\n  /**\n   * @private\n   */\n  _insertIntoTypedArray(array, arrayToInsert, insertAtByteOffset) {\n    return this._concatTypedArrays(\n      this._concatTypedArrays(\n        array.slice(0, insertAtByteOffset),\n        arrayToInsert\n      ),\n      array.slice(insertAtByteOffset, array.length)\n    );\n  }\n}\n\n\n//# sourceURL=webpack://Civ5Save/./src/Civ5SaveStringToBoolMap.js?");

/***/ }),

/***/ "./src/ExtendableError.js":
/*!********************************!*\
  !*** ./src/ExtendableError.js ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return ExtendableError; });\n/**\n * @ignore\n * @see https://stackoverflow.com/a/32749533/399105\n */\nclass ExtendableError extends Error {\n  /**\n   * @ignore\n   */\n  constructor(message) {\n    super(message);\n    /**\n     * @ignore\n     */\n    this.name = this.constructor.name;\n    if (typeof Error.captureStackTrace === 'function') {\n      Error.captureStackTrace(this, this.constructor);\n    } else {\n      /**\n       * @ignore\n       */\n      this.stack = (new Error(message)).stack;\n    }\n  }\n}\n\n\n//# sourceURL=webpack://Civ5Save/./src/ExtendableError.js?");

/***/ })

/******/ });
});